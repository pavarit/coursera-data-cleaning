m <- mean(data, ...)
x$setmean(m)
m
}
library(datasets)
iris
iris$Sepal.Length
iris[, "Sepal.Length"]
mean(iris$Sepal.Length)
?lapply
?tapply
tapply(iris$Sepal.Length, iris$Species, mean)
?colMeans
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
head (mtcars)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
split(mtcars$mpg,mtcars$cyl)
with(mtcars,tapply(mpg,cyl,mean))
with(mtcars,tapply(hp,cyl,mean))
x <- with(mtcars,tapply(hp,cyl,mean))
class(x)
x["4"]
x["4"]-x["8"]
abs(x["4"]-x["8"])
debug(ls)
ls()
library(swirl)
swirl()
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(letters)
sample(LETTERS)
flips <- sample(c(0,1), 100, replacement = TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
play()
rbinom(2, size = 100, prob = 0.7)
rbinom(3, size = 100, prob = 0.7)
nxt()
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col=2)
play()
par(cars)
nxt()
plot(cars, xlim = c(10,15))
?points
?par
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(swirl  )
swirl()
select(cran, ip_id, package, country)
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
play()
?read.csv
nxt()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version = "3.1.1", country =="US")
filter(cran, r_version = "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US"| country == "IN")
filter(cran, size > 100500, r_os = "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
install.packages('RMySQL',type='source')
library(RMySQL)
library(RMySQL)
install.packages("DBI")
x <- c(2,3,4)
system.time(mean(x))
?system.time
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "cfcff17a0b9e136129a5",
secret = "8bb8c8b997151855abb049d8741c512319b13b53")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset/train")
?read.csv
read.table("X_train.txt")
xtrain <- read.table("X_train.txt")
dim(xtrain)
ytrain <- read.table("y_train.txt")
dim(ytrain)
summary(xtrain)
ytrain
dim(xtrain)
roenames(xtrain)
rownames(xtrain)
library(dplyr)
subjtrain <- read.table("subject_train.txt")
subjtrain
ytrain
setwd("inertial Signal")
setwd("Inertial Signal")
setwd(Inertial Signal)
?setwd
setwd("/Inertial Signal")
setwd("Inertial Signals")
baxtrain <- read.table("body_acc_x_train.txt")
baxtrain
xtrain
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset")
colnames(xtrain) <- read.table("features.txt")
colnames(xtrain)
features <- read.table("features.txt")
features
colnames(xtrain) <- features[, 2]
colnames(xtrain)
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset/train")
xtrain <- read.table("X_train.txt")
ytrain <- read.table("y_train.txt")
subjtrain <- read.table("subject_train.txt")
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset/test")
xtest <- read.table("X_test.txt")
ytest <- read.table("y_test.txt")
subjtest <- read.table("subject_test.txt")
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset")
actlabel <- read.table("activity_labels.txt")
features <- read.table("features.txt")
?cbind
cbind(cubjtrain, xtrain, ytrain)
cbind(subjtrain, xtrain, ytrain)
alltrain <- cbind(subjtrain, xtrain, ytrain)
alltest <- cbind(subjtest, xtest, ytest)
data <- rbind(alltrain, alltest)
features
grep("mean", features)
grep("mean", features[, 2])
grep("mean()", features[, 2])
grep("mean\()", features[, 2])
grep("mean\(\)", features[, 2])
grep("mean\(", features[, 2])
grep("mean(.*)", features[, 2])
grep("mean+ (.*)", features[, 2])
grep("mean+(.*)+", features[, 2])
grep("mean/(", features[, 2])
grep("mean\(", features[, 2])
grep("mean\(/", features[, 2])
grep("mean/\(", features[, 2])
grep("mean/(\", features[, 2])
grep("mean(", features[, 2])
grep("mean \(", features[, 2])
?grep
grep("mean\\(", features[, 2])
grep("mean\\(\\)", features[, 2])
grep("std\\(\\)", features[, 2])
grep("std\\(\\)"|"std\\(\\)", features[, 2])
grep("std\\(\\) | std\\(\\)", features[, 2])
grep("mean\\(\\) | std\\(\\)", features[, 2])
grep("mean\\(\\)|std\\(\\)", features[, 2])
select(data, grep("mean\\(\\)|std\\(\\)", features[, 2]))
colnames(data) <- c("subject", features[, 2], "activity")
select(data, grep("mean\\(\\)|std\\(\\)", features[, 2]))
grepl("mean\\(\\)|std\\(\\)", features[, 2])
?grep
data[, grep("mean\\(\\)|std\\(\\)", features[, 2])]
colnames(data)
features
features[,2]
features[[,2]]
features[,[2]
features[,[2]]
class(features[,2])
?read.table
actlabel
actlabel <- read.table("activity_labels.txt", colClasses = "character")
features <- read.table("features.txt", colClasses = "numeric")
ytest <- read.table("y_test.txt", colClasses = "numeric")
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset")
actlabel <- read.table("activity_labels.txt", colClasses = "character")
features <- read.table("features.txt", colClasses = "numeric")
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset/test")
subjtest <- read.table("subject_test.txt", colClasses = "numeric")
xtest <- read.table("X_test.txt", colClasses = "numeric")
ytest <- read.table("y_test.txt", colClasses = "numeric")
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset")
actlabel <- read.table("activity_labels.txt", colClasses = "character")
features <- read.table("features.txt", colClasses = "numeric")
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset")
actlabel <- read.table("activity_labels.txt", colClasses = "character")
features <- read.table("features.txt", colClasses = "character")
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset/train")
subjtrain <- read.table("subject_train.txt", colClasses = "numeric")
xtrain <- read.table("X_train.txt", colClasses = "numeric")
ytrain <- read.table("y_train.txt", colClasses = "numeric")
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset/test")
subjtest <- read.table("subject_test.txt", colClasses = "numeric")
xtest <- read.table("X_test.txt", colClasses = "numeric")
ytest <- read.table("y_test.txt", colClasses = "numeric")
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset")
actlabel <- read.table("activity_labels.txt", colClasses = "character")
features <- read.table("features.txt", colClasses = "character")
##Bind data together
alltrain <- cbind(subjtrain, xtrain, ytrain)
alltest <- cbind(subjtest, xtest, ytest)
data <- rbind(alltrain, alltest)
colnames(data) <- c("subject", features[, 2], "activity")
colnames(data)
data[, grep("mean\\(\\)|std\\(\\)", features[, 2])]
dt <- rbind(alltrain, alltest)
colnames(dt) <- c("subject", features[, 2], "activity")
dtmeanstd <- dt[, grep("mean\\(\\)|std\\(\\)", features[, 2])]
test <- dtmeanstd[, activity]
test <- dtmeanstd[, "activity"]
test <- dtmeanstd$activity
test
stmeanstd
dtmeanstd
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset/train")
subjtrain <- read.table("subject_train.txt", colClasses = "numeric")
xtrain <- read.table("X_train.txt", colClasses = "numeric")
ytrain <- read.table("y_train.txt", colClasses = "numeric")
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset/test")
subjtest <- read.table("subject_test.txt", colClasses = "numeric")
xtest <- read.table("X_test.txt", colClasses = "numeric")
ytest <- read.table("y_test.txt", colClasses = "numeric")
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset")
actlabel <- read.table("activity_labels.txt", colClasses = "character")
features <- read.table("features.txt", colClasses = "character")
##Bind data together
alltrain <- cbind(subjtrain, xtrain, ytrain)
alltest <- cbind(subjtest, xtest, ytest)
dt <- rbind(alltrain, alltest)
colnames(dt) <- c("subject", features[, 2], "activity")
##Col with mean or std data
dtmeanstd <- dt[, grep("mean\\(\\)|std\\(\\)", features[, 2])]
dtmeanstd <- dt[, grep("mean\\(\\)|std\\(\\)", features[, 2], value = TRUE)]
dtmeanstd
dtmeanstd <- dt[, c("subject", grep("mean\\(\\)|std\\(\\)", features[, 2], value = TRUE), "activity")]
dtmeanstd
test <- dtmeanstd$activity
test
actlabel
?replace
replace(test, actlabel[,1], actlabel[,2])
class(actlabel[,2])
for(i in )
length(test)
actlabel
test[4]
for(i in length(test)) {
test[i] <- actlabel[i, ]
}
for(i in length(test)) {
test[i] <- actlabel[test[i], ]
}
for(i in length(test)) {
test[i] <- actlabel[test[[i]], ]
}
test[4]
test <- dtmeanstd$activity
for(i in length(test)) {
test[i] <- actlabel[test[[i]], ]
}
test[4]
test <- dtmeanstd$activity
test[4]
test[[4]]
dim(test)
actlabel[5,]
actlabel[5,2]
test <- dtmeanstd$activity
for(i in length(test)) {
test[i] <- actlabel[test[[i]], 2]
}
test
actlabel[test[[i]], 2]
test <- dtmeanstd$activity
for(i in length(test)) {
test[i] <- actlabel[test[i], 2]
}
test
actlabel[test[i], 2]
actlabel[5, 2]
class(actlabel[5, 2])
test[5]
test <- dtmeanstd$activity
test[5]
test[5] <- actlabel[test[5], 2]
test[5]
test[4]
test <- dtmeanstd$activity
for(i in length(test)) {
test[i] <- actlabel[test[i], 2]
}
test
for(i in length(test)) {
test[i] <- actlabel[test[i], 2]
}
test
test <- dtmeanstd$activity
for(i in 1:length(test)) {
test[i] <- actlabel[test[i], 2]
}
test
for(i in 1:length(dtmeanstd$activity)) {
dtmeanstd$activity[i] <- actlabel[dtmeanstd$activity[i], 2]
}
dtmeanstd$activity
str(dtmeanstd)
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset/train")
subjtrain <- read.table("subject_train.txt", colClasses = "numeric")
xtrain <- read.table("X_train.txt", colClasses = "numeric")
ytrain <- read.table("y_train.txt", colClasses = "numeric")
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset/test")
subjtest <- read.table("subject_test.txt", colClasses = "numeric")
xtest <- read.table("X_test.txt", colClasses = "numeric")
ytest <- read.table("y_test.txt", colClasses = "numeric")
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset")
actlabel <- read.table("activity_labels.txt", colClasses = "character")
features <- read.table("features.txt", colClasses = "character")
##Bind data together
alltrain <- cbind(subjtrain, ytrain, xtrain)
alltest <- cbind(subjtest, ytest, xtest)
dt <- rbind(alltrain, alltest)
colnames(dt) <- c("subject", "activity", features[, 2])
##Col with mean or std data
dtmeanstd <- dt[, c("subject", "activity", grep("mean\\(\\)|std\\(\\)", features[, 2], value = TRUE))]
for(i in 1:length(dtmeanstd$activity)) {
dtmeanstd$activity[i] <- actlabel[dtmeanstd$activity[i], 2]
}
library(plyr)
install.packages("plyr")
library(plyr)
library(dplyr)
?ddply
?tapply
tapply(dtmeanstd, dtmeanstd[, c("subject", "activity")], mean)
dtmeanstd[, c("subject", "activity")]
class(dtmeanstd[, c("subject", "activity")])
tapply(dtmeanstd, dtmeanstd[, c("subject", "activity")], mean)
tapply(dtmeanstd, dtmeanstd[, c("subject")], mean)
tapply(dtmeanstd[, 5], dtmeanstd[, c("subject", "activity")], mean)
?split
split(dtmeanstd, dtmeanstd[, c("subject", "activity")])
stest <- split(dtmeanstd, dtmeanstd[, c("subject", "activity")])
sapply(stest, colMeans)
sapply(stest[, 3:ncol(stest)], colMeans)
ncol(stest)
sapply(stest[, 3:ncol(dtmeanstd)], colMeans)
ncol(dtmeanstd)
?data.frame
summarydt <- dtmeanstd[0, ]
tapply(dtmeanstd[, 5], dtmeanstd[, c("subject", "activity")], mean)
?setkey
?dplyr
dtmeanstd %>% group_by(subject, activity) %>% summarize_each(funs(mean))
dtmeanstd %>% group_by(subject, activity) %>% summarize_each(funs(mean))
?left_join
actlabel
dtmeanstd %>% left_join(actlabel, by = c("activity" = "V2"))
dtmeanstd %>% left_join(actlabel, by = c("activity" = "V1"))
##You should create one R script called run_analysis.R that does the following.
## 1) Merges the training and the test sets to create one data set.
## 2) Extracts only the measurements on the mean and standard deviation for each measurement.
## 3) Uses descriptive activity names to name the activities in the data set
## 4) Appropriately labels the data set with descriptive variable names.
## 5) From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
library(dplyr)
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset/train")
subjtrain <- read.table("subject_train.txt", colClasses = "numeric")
xtrain <- read.table("X_train.txt", colClasses = "numeric")
ytrain <- read.table("y_train.txt", colClasses = "numeric")
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset/test")
subjtest <- read.table("subject_test.txt", colClasses = "numeric")
xtest <- read.table("X_test.txt", colClasses = "numeric")
ytest <- read.table("y_test.txt", colClasses = "numeric")
setwd("~/Coursera/Data Cleaning/Final Project/UCI HAR Dataset")
actlabel <- read.table("activity_labels.txt", colClasses = "character")
features <- read.table("features.txt", colClasses = "character")
##Bind data together
alltrain <- cbind(subjtrain, ytrain, xtrain)
alltest <- cbind(subjtest, ytest, xtest)
dt <- rbind(alltrain, alltest)
colnames(dt) <- c("subject", "activity", features[, 2])
##Col with mean or std data
dtmeanstd <- dt[, c("subject", "activity", grep("mean\\(\\)|std\\(\\)", features[, 2], value = TRUE))]
dttbl <- tbl_df(dtmeanstd)
dtmeanstd %>% left_join(actlabel, by = c("activity" = "V1"))
dtmeanstd
##Replace activity number with activity names
for(i in 1:length(dtmeanstd$activity)) {
dtmeanstd$activity[i] <- actlabel[dtmeanstd$activity[i], 2]
}
## Create index for tapply
uniqindex <- paste(dtmeanstd$subject, dtmeanstd$activity)
by(dtmeanstd[, 3:ncol(dtmeanstd)], uniqindex, colMeans)
##Convert to dataframe
df <- data.frame(matrix(unlist(test), nrow=length(test), byrow=T))
dtmeanstd %>% group_by(subject, activity) %>% summarize_each(funs(mean))
df <- dtmeanstd %>% group_by(subject, activity) %>% summarize_each(funs(mean))
names(df)
summary(subjtest)
summary(xtest)
subjtest
summary(subjtest)
summary(subjtrain)
30*6
?write.table
setwd("~/Coursera/Data Cleaning/Final Project")
write.table(dttidy, file = "tidy data.txt", row.names = FALSE)
dttidy <- dtmeanstd %>% group_by(subject, activity) %>% summarize_each(funs(mean))
write.table(dttidy, file = "tidy data.txt", row.names = FALSE)
setwd("UCI HAR Dataset/train")
getwd
getwd()
setwd(..)
setwd("..")
getwd()
setwd(test)
setwd("test")
